<!-- views/solicitud/editar.ejs -->
<%- include('../partials/header', { title: 'Editar Solicitud' }) %>
<%- include('../partials/navbar') %>
<%- include('../partials/sidebar') %>
<%- include('../partials/content-wrapper-open') %>

<div class="content-wrapper">
  <div class="container-xxl flex-grow-1 container-p-y">
    <div class="app-solicitud-editar">
      <!-- Mensajes de éxito y error -->
      <% if (successMessage && successMessage.length > 0) { %>
        <div class="alert alert-success alert-dismissible fade show" role="alert">
          <%= successMessage %>
          <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Cerrar"></button>
        </div>
      <% } %>
      <% if (errorMessage && errorMessage.length > 0) { %>
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
          <%= errorMessage %>
          <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Cerrar"></button>
        </div>
      <% } %>

      <form
        action="/solicitudes-editar/<%= solicitud.id %>"
        method="POST"
        enctype="multipart/form-data"
        class="needs-validation"
        novalidate
      >
        <!-- Parte Superior: Botón Regresar -->
        <div class="d-flex flex-column align-items-start mb-4">
          <a href="/solicitudes" class="btn btn-secondary mb-3">
            <i class="fas fa-arrow-left me-1"></i> Regresar
          </a>
        </div>

        <!-- Contenido del Formulario -->
        <div class="card shadow-sm mb-4">
          <div class="card-body">
            <!-- Campo de Asunto -->
            <div class="mb-4">
              <h6 class="fw-bold">Asunto <span class="text-danger">*</span></h6>
              <input
                type="text"
                class="form-control <%= errors && errors.asunto ? 'is-invalid' : '' %>"
                id="asunto"
                name="asunto"
                value="<%= solicitud.asunto %>"
                required
              />
              <% if (errors && errors.asunto) { %>
                <div class="invalid-feedback"><%= errors.asunto %></div>
              <% } %>
            </div>

            <!-- Campo de Descripción -->
            <div class="mb-4">
              <h6 class="fw-bold">Descripción <span class="text-danger">*</span></h6>
              <textarea
                class="form-control <%= errors && errors.descripcion ? 'is-invalid' : '' %>"
                id="descripcion"
                name="descripcion"
                rows="4"
                required
              ><%= solicitud.descripcion %></textarea>
              <% if (errors && errors.descripcion) { %>
                <div class="invalid-feedback"><%= errors.descripcion %></div>
              <% } %>
            </div>

            <!-- Archivos Adjuntos Existentes con Opción de Eliminación -->
            <div class="mb-4">
              <h6 class="fw-bold">Archivos Adjuntos Existentes</h6>
              <% 
                let archivos = [];
                try {
                  archivos = JSON.parse(solicitud.archivos).filter(archivo => archivo.eliminado === 0);
                } catch (e) {
                  console.error("Error al parsear los archivos:", e);
                  archivos = [];
                }
              %>
              <% if (archivos && archivos.length > 0) { %>
                <ul class="list-group mb-3">
                  <% archivos.forEach((archivo) => {
                    const extension = archivo.url.split('.').pop().toLowerCase();
                    let iconClass = 'fas fa-file';
                    if (['pdf'].includes(extension)) iconClass = 'fas fa-file-pdf';
                    else if (['jpg', 'jpeg', 'png'].includes(extension)) iconClass = 'fas fa-file-image';
                    else if (['doc', 'docx'].includes(extension)) iconClass = 'fas fa-file-word';
                    else if (['xlsx', 'xls'].includes(extension)) iconClass = 'fas fa-file-excel';
                  %>
                    <li class="list-group-item d-flex justify-content-between align-items-center">
                      <a href="<%= archivo.url %>" target="_blank" class="text-decoration-none">
                        <i class="<%= iconClass %> me-2"></i> <%= archivo.url.split('/').pop() %>
                      </a>
                      <button type="button" class="btn btn-danger btn-sm" onclick="removeExistingFile('<%= archivo.url %>', this)">
                        <i class="fas fa-trash-alt"></i> Eliminar
                      </button>
                    </li>
                  <% }); %>
                </ul>
              <% } else { %>
                <p class="text-muted">No hay archivos adjuntos existentes.</p>
              <% } %>
              <!-- Lista de archivos a eliminar (campo oculto) -->
              <input type="hidden" name="deletedFiles" id="deletedFiles" value="[]">
            </div>

            <!-- Subir Nuevos Archivos con Lista de Archivos a Subir -->
            <div class="mb-4">
              <h6 class="fw-bold">Subir Nuevos Archivos</h6>
              <button type="button" class="btn btn-outline-secondary mb-2" onclick="document.getElementById('archivos').click()">
                <i class="fas fa-upload me-1"></i> Seleccionar archivos
              </button>
              <input
                type="file"
                class="form-control <%= errors && errors.archivos ? 'is-invalid' : '' %>"
                id="archivos"
                name="archivos"
                accept=".pdf,.jpg,.jpeg,.png,.docx"
                multiple
                onchange="handleFileSelect(this)"
                style="display: none;"
              />
              <small class="form-text text-muted">
                Formatos permitidos: PDF, JPG, JPEG, PNG, DOCX (máximo 10 archivos y 10 MB en total)
              </small>
              <% if (errors && errors.archivos) { %>
                <div class="invalid-feedback"><%= errors.archivos %></div>
              <% } %>
              <!-- Lista de nuevos archivos a subir -->
              <ul id="new-file-list" class="list-group mt-2"></ul>
            </div>
          </div>
        </div>

        <!-- Parte Inferior: Botones de Acción -->
        <div class="d-flex justify-content-end gap-2 mt-4">
          <button
            type="button"
            class="btn btn-warning"
            onclick="clearForm(this)"
          >
            <i class="fas fa-eraser me-1"></i> Cancelar
          </button>
          <button type="submit" class="btn btn-primary">
            <i class="fas fa-save me-1"></i> Guardar Cambios
          </button>
        </div>
      </form>
    </div>
  </div>
  <div class="content-backdrop fade"></div>
</div>

<script>
  (function () {
    'use strict';
    var forms = document.querySelectorAll('.needs-validation');
    Array.prototype.slice.call(forms).forEach(function (form) {
      form.addEventListener('submit', function (event) {
        if (!form.checkValidity()) {
          event.preventDefault();
          event.stopPropagation();
        }
        form.classList.add('was-validated');
      }, false);
    });
  })();

  // Array para almacenar los nuevos archivos seleccionados
  let selectedFiles = [];

  // Función para manejar la selección de archivos
  function handleFileSelect(input) {
    const files = Array.from(input.files);
    const maxFiles = 10;
    const maxSizeTotal = 10 * 1024 * 1024; // 10 MB
    const allowedExtensions = ['pdf', 'jpg', 'jpeg', 'png', 'docx'];

    // Obtener el número de archivos existentes
    const existingFilesCount = archivos.length;

    // Validar número total de archivos (existentes + nuevos)
    if (files.length + selectedFiles.length + existingFilesCount > maxFiles) {
      alert(`Puedes subir un máximo de ${maxFiles} archivos en total.`);
      input.value = '';
      return;
    }

    // Calcular el tamaño total
    let totalSize = selectedFiles.reduce((sum, file) => sum + file.size, 0);
    for (const file of files) {
      const extension = file.name.split('.').pop().toLowerCase();
      if (!allowedExtensions.includes(extension)) {
        alert(`El archivo "${file.name}" tiene una extensión no permitida.`);
        input.value = '';
        return;
      }
      totalSize += file.size;
      if (totalSize > maxSizeTotal) {
        alert('El tamaño total de los archivos no puede superar los 10 MB.');
        input.value = '';
        return;
      }
      selectedFiles.push(file);
    }

    updateNewFileList();
    input.value = '';
  }

  // Función para actualizar la lista de nuevos archivos a subir
  function updateNewFileList() {
    const newFileList = document.getElementById('new-file-list');
    newFileList.innerHTML = '';

    selectedFiles.forEach((file, index) => {
      const listItem = document.createElement('li');
      listItem.className = 'list-group-item d-flex justify-content-between align-items-center';
      listItem.textContent = file.name;

      const removeButton = document.createElement('button');
      removeButton.className = 'btn btn-sm btn-danger';
      removeButton.textContent = 'Eliminar';
      removeButton.onclick = () => removeNewFile(index);

      listItem.appendChild(removeButton);
      newFileList.appendChild(listItem);
    });
  }

  // Función para eliminar un archivo de la lista de nuevos archivos
  function removeNewFile(index) {
    selectedFiles.splice(index, 1);
    updateNewFileList();
  }

  // Función para manejar la eliminación de archivos existentes
  function removeExistingFile(fileUrl, button) {
    const deletedFilesInput = document.getElementById("deletedFiles");
    let deletedFiles = JSON.parse(deletedFilesInput.value);
    deletedFiles.push(fileUrl);
    deletedFilesInput.value = JSON.stringify(deletedFiles);
    button.closest("li").remove();
    // Opcional: Puedes mostrar un mensaje de confirmación adicional aquí
  }

  // Función para limpiar el formulario
  function clearForm(button) {
    const form = button.closest('form');
    if (form) {
      form.reset();
      form.classList.remove('was-validated');
      document.getElementById("deletedFiles").value = "[]";
      selectedFiles = [];
      updateNewFileList();
    }
  }

  // Antes de enviar el formulario, asignar los nuevos archivos seleccionados al input de archivos
  document.querySelector("form").addEventListener("submit", function(event) {
    const dataTransfer = new DataTransfer();
    selectedFiles.forEach(file => dataTransfer.items.add(file));
    document.getElementById("archivos").files = dataTransfer.files;
  });
</script>

<%- include('../partials/footer-text') %>
<%- include('../partials/footer') %>
<%- include('../partials/content-wrapper-close') %>
